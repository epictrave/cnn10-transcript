{"version":3,"sources":["getContent.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getContent","url","a","axios","get","then","res","data","catch","e","$","cheerio","load","bodyList","text","replace","split","Transcript","title","useState","content","setContent","useEffect","console","log","length","className","map","index","key","App","location","query","queryString","parse","search","translate","script","document","createElement","src","script2","type","setTimeout","googleTranslateElement","getElementsByClassName","item","childNodes","removeAttribute","body","appendChild","removeChild","id","Boolean","window","hostname","match","ReactDOM","render","StrictMode","component","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iaAGaA,EAAU,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,sEACLC,IAChBC,IADgB,8CAC2BH,IAC3CI,MAAK,SAACC,GAAD,OAASA,EAAIC,QAClBC,OAAM,SAACC,GAAD,OAAO,QAJQ,UAKX,QAJPF,EADkB,iDAMf,MANe,cAQlBG,EAAIC,IAAQC,KAAKL,UACjBM,EAAWH,EAAE,gBAChBI,OACAC,QAAQ,SAAU,eAClBA,QAAQ,UAAW,WACnBA,QAAQ,QAAS,KACjBA,QAAQ,YAAa,OACrBA,QAAQ,6BAA8B,IACtCA,QAAQ,6DAA8D,IACtEC,MAAM,OACO,GAlBQ,kBAmBjBH,GAnBiB,2CAAH,sDCqDjBI,EAAqC,SAAC,GAAoB,IAAlBhB,EAAiB,EAAjBA,IAAKiB,EAAY,EAAZA,MAAY,EAC/BC,mBAAmB,IADY,mBACtDC,EADsD,KAC7CC,EAD6C,KAW7D,OATAC,qBAAU,WACR,sBAAC,4BAAApB,EAAA,sEACoBF,EAAWC,GAD/B,QACOM,EADP,UAGGc,EAAWd,GACXgB,QAAQC,IAAIjB,EAAKkB,SAJpB,0CAAD,MASA,6BACGL,EAAQK,OAAS,EAChB,kBAAC,WAAD,KACE,wBAAIC,UAAU,SAASR,GACvB,yBAAKQ,UAAU,WACZN,EAAQO,KAAI,SAACP,EAAiBQ,GAC7B,OAAO,uBAAGC,IAAKD,GAAQR,QAK7B,KAKOU,EA9E4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtCC,EAAQC,IAAYC,MAAMH,EAASI,QACnClC,EAAc+B,EAAM/B,IACpBmC,EAAoBJ,EAAMI,UAC1BlB,EAAgBc,EAAMd,MAkC5B,OAjCAK,QAAQC,IAAIQ,GACZV,qBAAU,WACR,IAAMe,EAASC,SAASC,cAAc,UACtCF,EAAOG,IACL,8EAEF,IAAMC,EAAUH,SAASC,cAAc,UAmBvC,OAlBAE,EAAQC,KAAO,kBACfD,EAAQ3B,KAAR,iJAGA6B,YAAW,WACT,IAAMC,EAAyBN,SAC5BO,uBAAuB,gCACvBC,KAAK,GACJF,GACDA,EAAuBG,WAAW,GAChCA,WAAW,GAAeC,gBAAgB,UAE9C,KAECZ,IACFE,SAASW,KAAKC,YAAYb,GAC1BC,SAASW,KAAKC,YAAYT,IAErB,WACDL,IACFE,SAASW,KAAKE,YAAYd,GAC1BC,SAASW,KAAKE,YAAYV,OAG7B,CAACL,IAGF,yBAAKV,UAAU,OACZU,EAAY,yBAAKgB,GAAG,6BAAoC,GACzD,kBAAC,EAAD,CAAYnD,IAAKA,EAAKiB,MAAOA,MCnCfmC,QACW,cAA7BC,OAAOvB,SAASwB,UAEe,UAA7BD,OAAOvB,SAASwB,UAEhBD,OAAOvB,SAASwB,SAASC,MACvB,2D,oBCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,UAAW9B,OAIxBQ,SAASuB,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEd1D,OAAM,SAAA2D,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.c6bb69f3.chunk.js","sourcesContent":["import axios from \"axios\";\nimport cheerio from \"cheerio\";\n\nexport const getContent = async (url: string) => {\n  const data = await axios\n    .get(`https://cors-anywhere.herokuapp.com/${url}`)\n    .then((res) => res.data)\n    .catch((e) => null);\n  if (data === null) {\n    return null;\n  }\n  const $ = cheerio.load(data);\n  const bodyList = $(\".cnnBodyText\")\n    .text()\n    .replace(\"ETTHIS\", \"ET.  \\nTHIS\")\n    .replace(/\\.\\s+/gm, \".aaaaaa\")\n    .replace(/\\s+/gm, \" \")\n    .replace(/.aaaaaa/gm, \".\\n\")\n    .replace(\"THIS IS A RUSH TRANSCRIPT.\", \"\")\n    .replace(\"THIS COPY MAY NOT BE IN ITS FINAL FORM AND MAY BE UPDATED.\", \"\")\n    .split(\"\\n\");\n  delete bodyList[0];\n  return bodyList;\n};\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport queryString from \"query-string\";\nimport \"./App.css\";\nimport { getContent } from \"./getContent\";\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n  const query = queryString.parse(location.search);\n  const url: string = query.url as string;\n  const translate: string = query.translate as string;\n  const title: string = query.title as string;\n  console.log(query);\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src =\n      \"//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\";\n\n    const script2 = document.createElement(\"script\");\n    script2.type = \"text/javascript\";\n    script2.text = `function googleTranslateElementInit() {\n      new google.translate.TranslateElement({pageLanguage: 'en'}, 'google_translate_element');\n    }`;\n    setTimeout(() => {\n      const googleTranslateElement = document\n        .getElementsByClassName(\"skiptranslate goog-te-gadget\")\n        .item(0);\n      if (googleTranslateElement) {\n        (googleTranslateElement.childNodes[1]\n          .childNodes[0] as Element).removeAttribute(\"href\");\n      }\n    }, 500);\n\n    if (translate) {\n      document.body.appendChild(script);\n      document.body.appendChild(script2);\n    }\n    return () => {\n      if (translate) {\n        document.body.removeChild(script);\n        document.body.removeChild(script2);\n      }\n    };\n  }, [translate]);\n\n  return (\n    <div className=\"App\">\n      {translate ? <div id=\"google_translate_element\"></div> : \"\"}\n      <Transcript url={url} title={title} />\n    </div>\n  );\n};\ntype ContentProps = {\n  url: string;\n  title: string;\n};\n\nconst Transcript: React.FC<ContentProps> = ({ url, title }) => {\n  const [content, setContent] = useState<string[]>([]);\n  useEffect(() => {\n    (async () => {\n      const data = await getContent(url);\n      if (data) {\n        setContent(data);\n        console.log(data.length);\n      }\n    })();\n  });\n  return (\n    <div>\n      {content.length > 0 ? (\n        <Fragment>\n          <h2 className=\"title\">{title}</h2>\n          <div className=\"content\">\n            {content.map((content: string, index: number) => {\n              return <p key={index}>{content}</p>;\n            })}\n          </div>\n        </Fragment>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Switch>\n        <Route component={App} />\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}